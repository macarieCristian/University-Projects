
(defun len(x)
	(cond
		((null x)
			0
		)
		(T
			(+ 1 (len (cdr x)))
		)
	)
)

;firsts(x,f)
;nil,if x = null
;l1+firsts([l2,...,ln],1),if l1 is atom && len(x) mod 2 = 1 && f = 0
;firsts([l2,...,ln],1),if l1 is atom && len(x) mod 2 = 0 && f = 0
;firsts([l2,...,ln],1),if l1 is atom && f=1
;firsts(l1,0)+firsts([l2,...,ln],1),if l1 is list

(defun firsts(x f)
	(cond
		((null x)
			nil
		)
		((and (atom (car x)) (=(mod (len x) 2)1) (= f 0))
			(append (list(car x)) (firsts (cdr x) 1))
		)
		((and (atom (car x)) (=(mod (len x) 2)0) (= f 0))
			(firsts (cdr x) 1)
		)
		((and (atom (car x)) (= f 1))
			(firsts (cdr x) 1)
		)
		((listp (car x))
			(append (firsts (car x) 0) (firsts (cdr x) 1))
		)
	)
)
	
(defun firstOdds(x)
	(firsts x 0)
)

(defun testfirstOdds()
	(assert (equal (firstOdds '(1 2 (3 4 5))) '(1 3)))
	(assert (equal (firstOdds '(1 2 (3 (4 5 6) (7 8 9)))) '(1 3 4 7)))
	(assert (equal (firstOdds '()) nil))
	"All tests passed!"
)
	